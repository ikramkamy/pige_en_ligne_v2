import React from "react";
import html2canvas from "html2canvas";
import { jsPDF } from "jspdf";

const exportToPDF = () => {
  const dashboardElement = document.getElementById("dashboard");

  if (!dashboardElement) {
    console.error("Dashboard element not found");
    return;
  }

  // Get the dimensions of the dashboard element
  const totalHeight = dashboardElement.scrollHeight;
  const totalWidth = dashboardElement.scrollWidth;

  // Use html2canvas to capture the full dashboard
  html2canvas(dashboardElement, {
    scale: 2, // Increase resolution for better quality
    useCORS: true, // Enable CORS for external images
    scrollY: -window.scrollY, // Adjust for scrolling
    scrollX: -window.scrollX,
    height: totalHeight, // Capture the full height
    width: totalWidth, // Capture the full width
    allowTaint: true, // Allow canvas tainting for complex elements
    logging: false, // Optional: Log progress for debugging
  })
    .then((canvas) => {
      const imgData = canvas.toDataURL("image/png");

      // Initialize jsPDF
      const pdf = new jsPDF({
        orientation: "portrait", // Set orientation to portrait for better fit
        unit: "mm",
        format: "a4",
      });

      // Get PDF page dimensions
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();

      // Calculate how many pages are needed
      const imgProps = pdf.getImageProperties(imgData);
      const ratio = pdfWidth / imgProps.width;
      const pageHeight = imgProps.height * ratio;

      let totalPages = Math.ceil(pageHeight / pdfHeight);

      // Add image to PDF across multiple pages
      for (let i = 0; i < totalPages; i++) {
        const position = i * (-pdfHeight);

        pdf.addImage(
          imgData,
          "PNG",
          0,
          position,
          pdfWidth,
          Math.min(pdfHeight, pageHeight - i * pdfHeight)
        );

        if (i < totalPages - 1) {
          pdf.addPage(); // Add a new page if content overflows
        }
      }

      // Save the PDF
      pdf.save(`Media_Review_${date1}_${date2}.pdf`);
    })
    .catch((error) => {
      console.error("Error capturing dashboard:", error);
    });
};

// Example Component
const Dashboard = () => {
  return (
    <div>
      {/* Your dashboard content */}
      <div
        id="dashboard"
        style={{
          padding: "20px",
          border: "1px solid #ccc",
          height: "2000px", // Example height
        }}
      >
        <h1>My Dashboard</h1>
        <p>This is a sample dashboard content.</p>
        {/* Add more components here */}
      </div>

      {/* Button to trigger the screenshot and PDF generation */}
      <button onClick={exportToPDF}>Download Dashboard as PDF</button>
    </div>
  );
};

export default Dashboard;